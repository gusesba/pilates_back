// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(uuid()) @db.Uuid
  name                  String             @db.VarChar(100)
  email                 String             @db.VarChar(100)
  passwordHash          String             @db.VarChar(100)
  userType              String             @db.VarChar(100)
  person                Person             @relation("UserPerson", fields: [personId], references: [id])
  personId              String             @unique @db.Uuid
  // Owned records
  ownedPersons          Person[]           @relation("PersonOwner")
  ownedPhones           Phone[]
  ownedAddresses        Address[]
  ownedContracts        Contract[]
  ownedSchedules        Schedule[]
  ownedAppointments     Appointment[]
  ownedEvaluations      Evaluation[]
  ownedReevaluations    Reevaluation[]
  ownedProgressNotes    ProgressNote[]
  ownedExercises        Exercise[]
  ownedExerciseProgress ExerciseProgress[]
}

model Person {
  id        String          @id @default(uuid()) @db.Uuid
  name      String          @db.VarChar(100)
  email     String          @db.VarChar(100)
  age       Int
  gender    String          @db.VarChar(100)
  user      User?           @relation("UserPerson")
  phones    PhonePerson[]
  addresses AddressPerson[]
  patient   Patient?
  employee  Employee?
  owner     User            @relation("PersonOwner", fields: [ownerId], references: [id])
  ownerId   String          @db.Uuid
}

model PhonePerson {
  id       String @id @default(uuid()) @db.Uuid
  person   Person @relation(fields: [personId], references: [id])
  personId String @db.Uuid
  phone    Phone  @relation(fields: [phoneId], references: [id])
  phoneId  String @db.Uuid
}

model AddressPerson {
  id        String  @id @default(uuid()) @db.Uuid
  person    Person  @relation(fields: [personId], references: [id])
  personId  String  @db.Uuid
  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @db.Uuid
}

model Phone {
  id          String        @id @default(uuid()) @db.Uuid
  number      String        @db.VarChar(100)
  areaCode    String        @db.VarChar(100)
  countryCode String        @db.VarChar(100)
  whatsapp    Boolean
  phonePerson PhonePerson[]
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String        @db.Uuid
}

model Address {
  id            String          @id @default(uuid()) @db.Uuid
  street        String          @db.VarChar(100)
  number        Int
  postalCode    String          @db.VarChar(100)
  neighborhood  String          @db.VarChar(100)
  city          String          @db.VarChar(100)
  state         String          @db.VarChar(100)
  country       String          @db.VarChar(100)
  addressPerson AddressPerson[]
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       String          @db.Uuid
}

model Patient {
  id               String                    @id @default(uuid()) @db.Uuid
  name             String                    @db.VarChar(100)
  email            String                    @db.VarChar(100)
  age              Int
  gender           String                    @db.VarChar(100)
  emergencyContact String                    @db.VarChar(100)
  person           Person                    @relation(fields: [id], references: [id])
  contracts        Contract[]
  appointments     Appointment[]
  evaluations      Evaluation[]
  reevaluations    Reevaluation[]
  progressNotes    ProgressNote[]
  schedules        EmployeeSchedulePatient[]
}

model Employee {
  id           String             @id @default(uuid()) @db.Uuid
  name         String             @db.VarChar(100)
  person       Person             @relation(fields: [personId], references: [id])
  personId     String             @unique @db.Uuid
  schedules    EmployeeSchedule[]
  appointments Appointment[]
}

model Contract {
  id        String   @id @default(uuid()) @db.Uuid
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String   @db.Uuid
  startDate DateTime
  endDate   DateTime
  period    String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @db.Uuid
}

model Schedule {
  id                String             @id @default(uuid()) @db.Uuid
  dateTime          DateTime
  employeeSchedules EmployeeSchedule[]
  owner             User               @relation(fields: [ownerId], references: [id])
  ownerId           String             @db.Uuid
}

model EmployeeSchedule {
  id                       String                    @id @default(uuid()) @db.Uuid
  schedule                 Schedule                  @relation(fields: [scheduleId], references: [id])
  scheduleId               String                    @db.Uuid
  employee                 Employee                  @relation(fields: [employeeId], references: [id])
  employeeId               String                    @db.Uuid
  maxPatients              Int
  employeeSchedulePatients EmployeeSchedulePatient[]
}

model EmployeeSchedulePatient {
  id                 String           @id @default(uuid()) @db.Uuid
  employeeSchedule   EmployeeSchedule @relation(fields: [employeeScheduleId], references: [id])
  employeeScheduleId String           @db.Uuid
  patient            Patient          @relation(fields: [patientId], references: [id])
  patientId          String           @db.Uuid
}

model Appointment {
  id         String   @id @default(uuid()) @db.Uuid
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  String   @db.Uuid
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.Uuid
  dateTime   DateTime
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String   @db.Uuid
}

model Evaluation {
  id                    String   @id @default(uuid()) @db.Uuid
  patient               Patient  @relation(fields: [patientId], references: [id])
  patientId             String   @db.Uuid
  date                  DateTime
  role                  String   @db.VarChar(100)
  allergies             String   @db.Text
  smoker                Boolean
  alcoholic             Boolean
  medications           String   @db.Text
  clinicalDiagnosis     String   @db.Text
  currentIllnessHistory String   @db.Text
  pastIllnessHistory    String   @db.Text
  complementaryExams    String   @db.Text
  inspectionPalpation   String   @db.Text
  painAssessment        String   @db.Text
  posturalAssessment    String   @db.Text
  goniometry            String   @db.Text
  muscularStrength      String   @db.Text
  specialTests          String   @db.Text
  owner                 User     @relation(fields: [ownerId], references: [id])
  ownerId               String   @db.Uuid
}

model Reevaluation {
  id        String   @id @default(uuid()) @db.Uuid
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String   @db.Uuid
  date      DateTime
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @db.Uuid
}

model ProgressNote {
  id          String             @id @default(uuid()) @db.Uuid
  patient     Patient            @relation(fields: [patientId], references: [id])
  patientId   String             @db.Uuid
  sessionDate DateTime
  observation String             @db.Text
  presence    Boolean
  exercises   ExerciseProgress[]
  owner       User               @relation(fields: [ownerId], references: [id])
  ownerId     String             @db.Uuid
}

model Exercise {
  id          String             @id @default(uuid()) @db.Uuid
  name        String             @db.VarChar(100)
  description String             @db.Text
  progress    ExerciseProgress[]
  owner       User               @relation(fields: [ownerId], references: [id])
  ownerId     String             @db.Uuid
}

model ExerciseProgress {
  id             String       @id @default(uuid()) @db.Uuid
  progressNote   ProgressNote @relation(fields: [progressNoteId], references: [id])
  progressNoteId String       @db.Uuid
  exercise       Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId     String       @db.Uuid
  observation    String       @db.Text
  owner          User         @relation(fields: [ownerId], references: [id])
  ownerId        String       @db.Uuid
}
